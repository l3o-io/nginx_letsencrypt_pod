--- # roles/nginx_letsencrypt/tasks/main.yml

- name: ensure host volume directories exist
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ nginx_webroot_volume_host_path }}"
    - "{{ nginx_confdir_volume_host_path }}"
    - "{{ letsencrypt_confdir_volume_host_path }}"
    - "{{ letsencrypt_statedir_volume_host_path }}"

- name: ensure webroot directories for each domain exist
  file:
    path: "{{ nginx_webroot_volume_host_path }}/{{ item }}"
    state: directory
  with_items: "{{ nginx_domains }}"

- block:
  - name: stat ssl certificates
    stat:
      path: "{{ letsencrypt_confdir_volume_host_path }}/live/{{ item }}"
    register: ssl_stats
    with_items: "{{ nginx_domains }}"
  - name: store info for each domain whether a certificate exists
    set_fact:
      ssl_cert_exists: "{{ ssl_cert_exists | default({}) | combine({item.item: item.stat.exists}) }}"
    with_items: "{{ ssl_stats['results'] }}"
  - name: stat domain configuration files
    stat:
      path: "{{ nginx_confdir_volume_host_path }}/{{ item }}.conf"
    register: domconf_stats
    with_items: "{{ nginx_domains }}"
  - name: store info for each domain whether a configuration file exists
    set_fact:
      dom_conf_exists: "{{ dom_conf_exists | default({}) | combine({item.item: item.stat.exists}) }}"
    with_items: "{{ domconf_stats['results'] }}"
  - name: create configuration file for each domain
    template:
      src: "config/domain.conf.j2"
      dest: "{{ nginx_confdir_volume_host_path }}/{{ item }}.conf"
    when: not dom_conf_exists[item]
    with_items: "{{ nginx_domains }}"

- name: create initial index.html file for each domain
  template:
    src: "site/index.html.j2"
    dest: "{{ nginx_webroot_volume_host_path }}/{{ item }}/index.html"
  with_items: "{{ nginx_domains }}"
  when: not skip_intial_index_file

- name: copy static configuration files
  copy:
    src: "{{ item }}"
    dest: "{{ nginx_confdir_volume_host_path }}/"
    force: yes
  with_items: "{{ ['config/'] | union(nginx_static_config | default([])) }}"

- name: copy static site files
  copy:
    src: "{{ item }}"
    dest: "{{ nginx_webroot_volume_host_path }}/"
    force: yes
  loop: "{{ nginx_static_site | default([]) }}"

- name: create nginx container
  vars:
    service_files_dir: /etc/systemd/system
    systemd_tempdir: "%t"
    container_name: "{{ nginx_container_name }}"
    container_state: running
    container_image_list:
      - "{{ nginx_container_image }}"
    container_run_args: >-
      --rm
      --network "{{ podman_network_name }}"
      -v "{{ nginx_confdir_volume_host_path }}:/etc/nginx/conf.d:ro"
      -v "{{ nginx_webroot_volume_host_path }}:/usr/share/nginx/html"
      -v "{{ letsencrypt_confdir_volume_host_path }}:/etc/letsencrypt:ro"
      {% if nginx_extra_volumes is defined %}
      {% for vol in nginx_extra_volumes %}
      -v "{{ vol.hostdir }}:{{ vol.containerdir }}"
      {% endfor %}
      {% endif %}
      {% if nginx_http_ip is defined %}
      -p "{{ nginx_http_ip }}:{{ nginx_http_port }}:80"
      {% else %}
      -p "{{ nginx_http_port }}:80"
      {% endif %}
      {% if nginx_http_ip is defined %}
      -p "{{ nginx_https_ip }}:{{ nginx_https_port }}:443"
      {% else %}
      -p "{{ nginx_https_port }}:443"
      {% endif %}
    container_firewall_ports:
      - "{{ nginx_http_port }}/tcp"
      - "{{ nginx_https_port }}/tcp"
  include_role:
    name: ikke_t.podman_container_systemd

- name: wait for nginx to start
  wait_for: "port={{ nginx_http_port }} host={{ nginx_http_ip | default('localhost') }} delay=2 state=present timeout=60"
  when: container_state is not defined

- name: reload nginx config
  command: "podman exec {{ nginx_container_name }} nginx -s reload"
  when: container_state is not defined

- name: check whether letsencrypt account is already registered
  stat:
    path: "{{ letsencrypt_confdir_volume_host_path }}/accounts"
  register: letsencyrpt_accounts

- name: register letsencrypt account in certbot container
  containers.podman.podman_container:
    name: "{{ letsencrypt_container_name }}_register"
    state: started
    image: "{{ letsencrypt_container_image }}"
    rm: yes
    network: "{{ podman_network_name }}"
    volume:
      - "{{ letsencrypt_confdir_volume_host_path }}:/etc/letsencrypt"
      - "{{ letsencrypt_statedir_volume_host_path }}:/var/lib/letsencrypt"
      - "{{ nginx_webroot_volume_host_path }}:/usr/share/nginx/html"
    command: >-
      register
      -m {{ letsencrypt_camail }}
      --agree-tos
      --non-interactive
  when: not letsencyrpt_accounts.stat.exists and letsencrypt_domains is defined

- name: create or renew certificate using certbot container
  containers.podman.podman_container:
    name: "{{ letsencrypt_container_name }}-renew"
    state: started
    image: "{{ letsencrypt_container_image }}"
    rm: yes
    network: "{{ podman_network_name }}"
    volume:
      - "{{ letsencrypt_confdir_volume_host_path }}:/etc/letsencrypt"
      - "{{ letsencrypt_statedir_volume_host_path }}:/var/lib/letsencrypt"
      - "{{ nginx_webroot_volume_host_path }}:/usr/share/nginx/html"
    command: >-
      certonly
      --webroot
      --webroot-path=/usr/share/nginx/html/{{ item }}
      -d {{ item }}
      -m {{ letsencrypt_camail }}
      --agree-tos
      --non-interactive
      --keep-until-expiring
  loop: "{{ letsencrypt_domains | default([]) }}"

- block:
  - name: stat ssl certificates (2nd round - post creation)
    stat:
      path: "{{ letsencrypt_confdir_volume_host_path }}/live/{{ item }}"
    register: ssl_stats
    with_items: "{{ nginx_domains }}"
  - name: store info for each domain whether a certificate exists
    set_fact:
      ssl_cert_exists: "{{ ssl_cert_exists | default({}) | combine({item.item: item.stat.exists}) }}"
    with_items: "{{ ssl_stats['results'] }}"
  - name: create configuration file for each domain (2nd round - post creation)
    template:
      src: "config/domain.conf.j2"
      dest: "{{ nginx_confdir_volume_host_path }}/{{ item }}.conf"
    when: not dom_conf_exists[item]
    with_items: "{{ nginx_domains }}"

- name: reload nginx config
  command: "podman exec {{ nginx_container_name }} nginx -s reload"
  when: container_state is not defined
